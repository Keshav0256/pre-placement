1.
class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return nullptr;
        queue<Node*> q;
        q.push(root);        
        while(size(q)) {
            Node* rightNode = nullptr;                    // set rightNode to null initially
            for(int i = size(q); i; i--) {                // traversing each level
                auto cur = q.front(); q.pop();            // pop a node from current level and,
                cur -> next = rightNode;                  // set its next pointer to rightNode
                rightNode = cur;                          // update rightNode as cur for next iteration
                if(cur -> right)                          // if a child exists
                    q.push(cur -> right),                 // IMP: push right first to do right-to-left BFS
                    q.push(cur -> left);                  // then push left
            }
        }
        return root;
    }
};
2.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if (root == nullptr || root->val == val)
            return root;

        if (val < root->val)
            return searchBST(root->left, val);

        return searchBST(root->right, val);
    }
};
3.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 class Solution {
 public:
     TreeNode* sortedArrayToBST(vector<int>& nums) {
         // We have to create a hight balanced BST
         // elements are strictly increasing
         if(nums.size()==0)return NULL;
         if(nums.size()==1) return new TreeNode(nums[0]);
         int middle = nums.size()/2;
         TreeNode* root = new TreeNode(nums[middle]);
         vector<int> leftsub(nums.begin(), nums.begin()+middle);
         vector<int> rightsub(nums.begin()+ middle+1, nums.end());
         root->left = sortedArrayToBST(leftsub);
         root->right = sortedArrayToBST(rightsub);
         return root;
     }
 };
4.
    class Solution {

   public:

int posi(vector<int>& inorder , int element , int size){

    for(int i=0; i<size ; i++){
        if(inorder[i]==element){
            return i;
        }
    }
    return -1 ;
}
TreeNode* solve(vector<int> preorder,vector<int> &inorder,int &preorderindex,int inorderstart,int inorderend, int size ){
    if(preorderindex>=size || inorderstart>inorderend){
          return NULL ;
    }
    int element = preorder[preorderindex++];
    TreeNode* root = new TreeNode(element);
    int position = posi(inorder, element , size);
root->left = solve(preorder,inorder,preorderindex,inorderstart,position-1,size);
 root->right = solve(preorder,inorder,preorderindex,position+1,inorderend,size);
    return root ; 
    
}


TreeNode* bstFromPreorder(vector<int>& preorder) {
    vector<int> inorder = preorder ;
    sort(inorder.begin(),inorder.end());
    
    int preorderindex = 0 ; 
    int inorderstart = 0 ; 
    int inorderend = inorder.size()-1 ; 
    int size = inorder.size();
    
 TreeNode* node=solve(preorder,inorder,preorderindex,inorderstart,inorderend,size);
     return node ; 
}
};
5.
class Solution {
private:
    bool ans(TreeNode* root, int &Max, int &Min) {
        if(root->left == NULL && root->right == NULL) {
            Max = max(Max, root->val);
            Min = min(Min, root->val);
            return true;
        }
        else if(root->left == NULL) {
            bool temp = ans(root->right, Max, Min);
            if(!temp || Min <= root->val) return false;
            Max = max(Max, root->val);
            Min = min(Min, root->val);
            return true;
        }
        else if(root->right == NULL) {
            bool temp = ans(root->left, Max, Min);
            if(!temp || Max >= root->val) return false;
            Max = max(Max, root->val);
            Min = min(Min, root->val);
            return true;
        }
        else {
            bool temp1 = ans(root->right, Max, Min);
            if(!temp1 || Min <= root->val) return false;

            int Max_temp = INT_MIN;
            bool temp2 = ans(root->left, Max_temp, Min);
            if(!temp2 || Max_temp >= root->val) return false;
            Max = max(Max, max(Max_temp, root->val));
            Min = min(Min, root->val);
            return true;
        }
    }
public:
    bool isValidBST(TreeNode* root) {
        int Max = INT_MIN, Min = INT_MAX;
        return ans(root, Max, Min);
    }
};
