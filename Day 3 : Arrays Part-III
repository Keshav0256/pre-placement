1.Search in a sorted 2D matrix:
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& mat, int target) {
        int n = mat.size(), m = mat[0].size();
        int i = 0, j = m*n - 1;
        while(i<=j){
            int mid = (i + j)/2;
            int r = mid/m;
            int c = mid%m;
            if(mat[r][c]==target)return true;
            if(mat[r][c]>target){
                j = mid - 1;
            }
            else i = mid + 1;
        }
        return false;
    }
};
2.Implement Pow(x,n) | X raised to the power N:
class Solution {
    public double myPow(double x, int n) {
       if(n>=0){
           return calPower(x,n);
       }
        else{
            return 1/calPower(x,n);
        }
    }
    private double calPower(double x, int n){
        if(n==0) return 1;
        
        double res=calPower(x,n/2);
        if(n%2!=0){
            return res*res*x;
        }
      return res*res;  
    }
}
3.Find the Majority Element that occurs more than N/2 times:
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
        int n = nums.size();
         int k = ceil(n/2);

        unordered_map<int,int>m1;
        for(int i=0;i<nums.size();i++){
            m1[nums[i]]++;
        }
        int g=0;
        for(auto it:m1){
         if(it.second > k){
            g=it.first;
         }  
        }
        return g;
    }
};
4.
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {

        //optimised solution
        int n = nums.size();
        int cnt1 = 0, cnt2 = 0;
        int el1 = INT_MIN;
        int el2 = INT_MIN;
        for(int i = 0;i<n;i++){
            if(cnt1 == 0 && el2 != nums[i]){
                cnt1 = 1;
                el1 = nums[i];
            }
            else if(cnt2 == 0 && el1 != nums[i]){
                cnt2 = 1;
                el2 = nums[i];
            }
            else if(nums[i] == el1){
                cnt1++;
            }
            else if(nums[i] == el2){
                cnt2++;
            }
            else{
                cnt1--,cnt2--;
            }
        }

        vector<int> ans;
        cnt1 = 0, cnt2 = 0;
        for(int i = 0;i<n;i++){
            if(el1 == nums[i]){
                cnt1++;
            }
            if(el2 == nums[i]){
                cnt2++;
            }
        }

        int mini = (int)(n/3) + 1;
        if(cnt1 >= mini){
            ans.push_back(el1);
        }
        if(cnt2 >= mini){
            ans.push_back(el2);
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
};
5.
class Solution {
public:
    int uniquePaths(int m, int n) {
        //mXn blocks
        vector<vector<int>> dp(m,vector<int>(n,1));
        //If olny one block is present
        if(m==1&&n==1){return 1;}
        //Path to (i,j)block =path to(i-1,j)+path to(i,j-1)
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j] = dp[i][j-1]+dp[i-1][j];
            }
        }
        return dp[m-1][n-1];
    }
};
6.
class Solution {
public:
    void merge(vector<int> &nums, int low, int mid, int high) {
        vector<int> temp; // temporary numsay
        int left = low;      // starting index of left half of nums
        int right = mid + 1;   // starting index of right half of nums

        //storing elements in the temporary numsay in a sorted manner//
        while (left <= mid && right <= high) {
            if (nums[left] <= nums[right]) {
                temp.push_back(nums[left]);
                left++;
            }
            else {
                temp.push_back(nums[right]);
                right++;
            }
        }
        // if elements on the left half are still left //
        while (left <= mid) {
            temp.push_back(nums[left]);
            left++;
        }
        //  if elements on the right half are still left //
        while (right <= high) {
            temp.push_back(nums[right]);
            right++;
        }
        // transfering all elements from temporary to nums //
        for (int i = low; i <= high; i++) {
            nums[i] = temp[i - low];
        }
    }
    
    int countPairs(vector<int> &nums, int low,int mid, int high) {
        int right=mid+1;
        int cnt=0;
        for(int i=low;i<=mid;i++) {
            while(right<=high && nums[i]> 2* (long long) nums[right])
                ++right;
            cnt += (right-(mid+1));
        }
        return cnt;
    }
    int mergeSort(vector<int>& nums, int low, int high) {
        int count = 0;
        if (low >= high) 
            return 0;
        int mid = (low + high) / 2 ;
        count += mergeSort(nums, low, mid);
        count += mergeSort(nums, mid + 1, high);
        count += countPairs(nums, low, mid, high);
        merge(nums, low, mid, high);
        return count;
    }
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums, 0, nums.size()-1);
    }
};
