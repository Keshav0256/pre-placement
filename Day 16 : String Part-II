1.
class Solution {
public:
    int strStr(string haystack, string needle) {
        int i = haystack.find(needle);
        if(i != string::npos)
        {
            return i;
        }
        else 
        return -1;
    }
};
2.
class Solution {
public:
    int strStr(string haystack, string needle) {
        int i = haystack.find(needle);
        if(i != string::npos)
        {
            return i;
        }
        else 
        return -1;
    }
};
3.
string s=A;
reverse(A.begin(),A.end());
s=s+'#'+A; //to avoid cases where full string is equal
int n =s.size();
vector<int>pi(n,0);
for(int i =1;i<n;i++){
int j =pi[i-1];
while(j>0&&s[i]!=s[j]){
j=pi[j-1];
}
if(s[i]==s[j]){
j++;
}
pi[i]=j;
}
return A.size()-pi[n-1];
}
4.
class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin(), s.end());
        sort(t.begin(), t.end());
        return s == t;
    }
};
5.
class Solution {
public:
string fun (string str1 )
{
    str1 +=" "; //to capture the last count 
    int len = str1.size();
    int count =1;
    string ans= "";

    for ( int i =0; i< len-1 ;i++)
    {
        if(str1[i+1] == str1[i]) count++;
        else {
            ans+=('0'+count);
            ans+=str1[i];
            count =1;
        }
    }
    return ans ;
}

    string countAndSay(int n) {
        if(n==1)
        return "1";
        string x=fun(countAndSay(n-1));
        return x;
}
};
